# -*- coding: utf-8 -*-
"""task_1ml

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p9bGgt0rKtGPNoDdtujzfVR7LFA6KQC6
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, LabelEncoder

# Load the sentiment dataset from a CSV file
from google.colab import files
uploaded = files.upload()

# Extract the file name from the dictionary
filename = list(uploaded.keys())[0]

# Load the CSV file
df = pd.read_csv(filename)

# Check the data
df.head()

df.info()

# Summary statistics
print(df.describe())

# Check for missing values
print(df.isnull().sum())

# Step 2: Handle Missing Values
# Fill Age with median
df['Age'] = df['Age'].fillna(df['Age'].median())


df.drop('Cabin', axis=1, inplace=True, errors='ignore')


# Fill Embarked with mode
# Corrected way to handle missing values
df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])


# Double-check missing values again
print(df.isnull().sum())

#3)Convert Categorical Features to Numerical
# Convert 'Sex' using Label Encoding
le = LabelEncoder()
df['Sex'] = le.fit_transform(df['Sex'])  # male = 1, female = 0

# One-hot encode 'Embarked' column
if 'Embarked' in df.columns:
    df = pd.get_dummies(df, columns=['Embarked'], drop_first=True)
else:
    print("Column 'Embarked' not found in DataFrame.")

print("Columns in dataframe:", df.columns.tolist())

# 4) Normalize / Standardize Numerical Features
scaler = StandardScaler()

# Select numeric columns to scale
numeric_cols = ['Age', 'Fare']
df[numeric_cols] = scaler.fit_transform(df[numeric_cols])

# Show result
print(df[numeric_cols].head())

# Boxplots to check for outliers
plt.figure(figsize=(12, 5))

for i, col in enumerate(numeric_cols):
    plt.subplot(1, 2, i + 1)
    sns.boxplot(data=df, x=col)
    plt.title(f'{col} - Boxplot')

plt.tight_layout()
plt.show()

def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]

# Remove outliers from each numeric column
for col in numeric_cols:
    df = remove_outliers(df, col)

print("Data shape after removing outliers:", df.shape)

# Save the cleaned dataframe to a CSV file
df.to_csv('cleaned_titanic.csv', index=False)

